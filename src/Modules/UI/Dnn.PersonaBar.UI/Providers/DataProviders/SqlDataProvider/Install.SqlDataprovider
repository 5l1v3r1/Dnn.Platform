/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/


IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}PersonaBarMenu') AND OBJECTPROPERTY(id, N'IsTable') = 1)
BEGIN
    CREATE TABLE {databaseOwner}[{objectQualifier}PersonaBarMenu](
	    [MenuId] INT IDENTITY(1,1) NOT NULL,
        [Identifier] NVARCHAR(50) NOT NULL,
	    [ModuleName] NVARCHAR(50) NOT NULL,
	    [Controller] NVARCHAR(260) NULL,
	    [ResourceKey] NVARCHAR(50) NOT NULL,
	    [Path] NVARCHAR(50) NOT NULL,
	    [Link] NVARCHAR(260) NULL,
	    [CssClass] NVARCHAR(50) NULL,
	    [MobileSupport] BIT NOT NULL DEFAULT(0) ,
	    [ParentId] INT NULL,
        [Order] INT NOT NULL DEFAULT(0),
        [AllowHost] BIT NOT NULL DEFAULT(0),
        [Enabled] BIT NOT NULL DEFAULT(0),
	    [CreatedByUserId] INT NULL,
	    [CreatedOnDate] DATETIME NULL,
	    [LastModifiedByUserId] INT NULL,
	    [LastModifiedOnDate] DATETIME NULL,
        CONSTRAINT [PK_{objectQualifier}PersonaBarMenu] PRIMARY KEY CLUSTERED ([MenuId] ASC),
        CONSTRAINT [FK_{objectQualifier}PersonaBarMenu_ParentId] FOREIGN KEY([ParentId]) REFERENCES {databaseOwner}[{objectQualifier}PersonaBarMenu] ([MenuId]),
        CONSTRAINT [IX_{objectQualifier}PersonaBarMenu] UNIQUE NONCLUSTERED ([Identifier] ASC)
    )
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}SavePersonaBarMenu') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}{objectQualifier}SavePersonaBarMenu
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SavePersonaBarMenu]
    @Identifier                   NVARCHAR(50),
    @ModuleName                 NVARCHAR(50),
    @Controller                 NVARCHAR(260),
    @ResourceKey                NVARCHAR(50),
    @Path                       NVARCHAR(50),
    @Link                       NVARCHAR(50),
    @CssClass                   NVARCHAR(50),
    @MobileSupport              BIT,
    @ParentId                   INT,
    @Order                      INT,
    @AllowHost                  BIT,
    @Enabled                    BIT,
    @CurrentUserId              INT
AS
BEGIN
    IF EXISTS(SELECT Identifier FROM {databaseOwner}[{objectQualifier}PersonaBarMenu] WHERE Identifier = @Identifier)
    BEGIN
        UPDATE {databaseOwner}[{objectQualifier}PersonaBarMenu]
            SET 
                ModuleName = @ModuleName,
                Controller = @Controller,
                ResourceKey = @ResourceKey,
                Path = @Path,
                Link = @Link,
                CssClass = @CssClass,
                MobileSupport = @MobileSupport,
                ParentId = @ParentId,
                [Order] = @Order,
                AllowHost = @AllowHost,
                Enabled = @Enabled,
                LastModifiedByUserId = CASE WHEN @CurrentUserId = -1 THEN NULL ELSE @CurrentUserId END,
                LastModifiedOnDate = GETDATE()
            WHERE Identifier = @Identifier

            SELECT MenuId FROM {databaseOwner}[{objectQualifier}PersonaBarMenu] WHERE Identifier = @Identifier
    END
    ELSE
    BEGIN
        INSERT INTO {databaseOwner}[{objectQualifier}PersonaBarMenu] (
            [Identifier],
            [ModuleName],
            [Controller],
            [ResourceKey],
            [Path],
            [Link],
            [CssClass],
            [MobileSupport],
            [ParentId],
            [Order],
            [AllowHost],
            [Enabled],
            [CreatedByUserId],
            [CreatedOnDate],
            [LastModifiedByUserId],
            [LastModifiedOnDate]
        ) VALUES (
            @Identifier,
            @ModuleName,
            @Controller,
            @ResourceKey,
            @Path,
            @Link,
            @CssClass,
            @MobileSupport,
            @ParentId,
            @Order,
            @AllowHost,
            @Enabled,
            CASE WHEN @CurrentUserId = -1 THEN NULL ELSE @CurrentUserId END,
            GETDATE(),
            CASE WHEN @CurrentUserId = -1 THEN NULL ELSE @CurrentUserId END,
            GETDATE()
        )

        SELECT SCOPE_IDENTITY()
    END
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}DeletePersonaBarMenuByIdentifier') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}{objectQualifier}DeletePersonaBarMenuByIdentifier
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeletePersonaBarMenuByIdentifier]
    @Identifier  NVARCHAR(50)
AS
    DELETE FROM {databaseOwner}[{objectQualifier}PersonaBarMenu]
        WHERE Identifier = @Identifier
GO

IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}GetPersonaBarMenu') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}{objectQualifier}GetPersonaBarMenu
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPersonaBarMenu]
AS
	SELECT * FROM {databaseOwner}[{objectQualifier}PersonaBarMenu]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}PersonaBarMenuDefaultRoles') AND OBJECTPROPERTY(id, N'IsTable') = 1)
BEGIN
    CREATE TABLE {databaseOwner}[{objectQualifier}PersonaBarMenuDefaultRoles](
	    [Id] INT IDENTITY(1,1) NOT NULL,
	    [MenuId] INT NOT NULL,
        [RoleNames] NVARCHAR(260) NOT NULL
        CONSTRAINT [PK_{objectQualifier}PersonaBarMenuDefaultRoles] PRIMARY KEY CLUSTERED ([Id] ASC),
        CONSTRAINT [FK_{objectQualifier}PersonaBarMenuDefaultRoles_MenuId] FOREIGN KEY([MenuId]) REFERENCES {databaseOwner}[{objectQualifier}PersonaBarMenu] ([MenuId])  ON DELETE CASCADE,
        CONSTRAINT [IX_{objectQualifier}PersonaBarMenuDefaultRoles] UNIQUE NONCLUSTERED ([MenuId] ASC)
    )
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}SavePersonaBarMenuDefaultRoles') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}{objectQualifier}SavePersonaBarMenuDefaultRoles
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SavePersonaBarMenuDefaultRoles]
    @MenuId                     INT,
    @RoleNames                  NVARCHAR(260)
AS
BEGIN
    IF EXISTS(SELECT MenuId FROM {databaseOwner}[{objectQualifier}PersonaBarMenuDefaultRoles] WHERE MenuId = @MenuId)
    BEGIN
        UPDATE {databaseOwner}[{objectQualifier}PersonaBarMenuDefaultRoles]
            SET 
                RoleNames = @RoleNames
            WHERE MenuId = @MenuId

            SELECT Id FROM {databaseOwner}[{objectQualifier}PersonaBarMenuDefaultRoles] WHERE MenuId = @MenuId
    END
    ELSE
    BEGIN
        INSERT INTO {databaseOwner}[{objectQualifier}PersonaBarMenuDefaultRoles] (
            [MenuId],
            [RoleNames]
        ) VALUES (
            @MenuId,
            @RoleNames
        )

        SELECT SCOPE_IDENTITY()
    END
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}GetPersonaBarMenuDefaultRoles') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}{objectQualifier}GetPersonaBarMenuDefaultRoles
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPersonaBarMenuDefaultRoles]
    @MenuId INT
AS
	SELECT RoleNames FROM {databaseOwner}[{objectQualifier}PersonaBarMenuDefaultRoles] WHERE MenuId = @MenuId
GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}PersonaBarExtensions') AND OBJECTPROPERTY(id, N'IsTable') = 1)
BEGIN
    CREATE TABLE {databaseOwner}[{objectQualifier}PersonaBarExtensions](
	    [ExtensionId] INT IDENTITY(1,1) NOT NULL,
        [Identifier] NVARCHAR(50) NOT NULL,
	    [MenuId] INT NOT NULL,
        [Controller] NVARCHAR(260) NULL,
        [Container] NVARCHAR(50) NOT NULL,
        [Path] NVARCHAR(50) NOT NULL,
        [Order] INT NOT NULL DEFAULT(0),
        [Enabled] BIT NOT NULL DEFAULT(1),
	    [CreatedByUserId] INT NULL,
	    [CreatedOnDate] DATETIME NULL,
	    [LastModifiedByUserId] INT NULL,
	    [LastModifiedOnDate] DATETIME NULL,
        CONSTRAINT [PK_{objectQualifier}PersonaBarExtensions] PRIMARY KEY CLUSTERED ([ExtensionId] ASC),
        CONSTRAINT [FK_{objectQualifier}PersonaBarExtensions_MenuId] FOREIGN KEY([MenuId]) REFERENCES {databaseOwner}[{objectQualifier}PersonaBarMenu] ([MenuId])  ON DELETE CASCADE,
        CONSTRAINT [IX_{objectQualifier}PersonaBarExtensions] UNIQUE NONCLUSTERED ([Identifier] ASC)
    )
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}SavePersonaBarExtension') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}{objectQualifier}SavePersonaBarExtension
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SavePersonaBarExtension]
    @Identifier                 NVARCHAR(50),
    @MenuId                     INT,
    @Controller                 NVARCHAR(260),
    @Container                  NVARCHAR(50),
    @Path                       NVARCHAR(50),
    @Order                      INT,
    @Enabled                    BIT,
    @CurrentUserId              INT
AS
BEGIN
    IF EXISTS(SELECT ExtensionId FROM {databaseOwner}[{objectQualifier}PersonaBarExtensions] WHERE Identifier = @Identifier)
    BEGIN
        UPDATE {databaseOwner}[{objectQualifier}PersonaBarExtensions]
            SET 
                MenuId = @MenuId,
                Controller = @Controller,
                Container = @Container,
                Path = @Path,
                [Order] = @Order,
                Enabled = @Enabled
            WHERE Identifier = @Identifier

            SELECT ExtensionId FROM {databaseOwner}[{objectQualifier}PersonaBarExtensions] WHERE Identifier = @Identifier
    END
    ELSE
    BEGIN
        INSERT INTO {databaseOwner}[{objectQualifier}PersonaBarExtensions] (
            [Identifier],
            [MenuId],
            [Controller],
            [Container],
            [Path],
            [Order],
            [Enabled]
        ) VALUES (
            @Identifier,
            @MenuId,
            @Controller,
            @Container,
            @Path,
            @Order,
            @Enabled
        )

        SELECT SCOPE_IDENTITY()
    END
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}DeletePersonaBarExtension') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}{objectQualifier}DeletePersonaBarExtension
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeletePersonaBarExtension]
    @Identifier NVARCHAR(50)
AS
	DELETE FROM {databaseOwner}[{objectQualifier}PersonaBarExtensions] WHERE Identifier = @Identifier
GO

IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}GetPersonaBarExtensions') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}{objectQualifier}GetPersonaBarExtensions
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPersonaBarExtensions]
AS
	SELECT * FROM {databaseOwner}[{objectQualifier}PersonaBarExtensions]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}PersonaBarMenuPermission') AND OBJECTPROPERTY(id, N'IsTable') = 1)
BEGIN
    CREATE TABLE {databaseOwner}[{objectQualifier}PersonaBarMenuPermission](
	    [MenuPermissionId] [INT] IDENTITY(1,1) NOT NULL,
        [PortalId] [INT],
	    [MenuId] INT NOT NULL,
	    [PermissionId] [INT] NOT NULL,
	    [AllowAccess] [BIT] NOT NULL,
	    [RoleId] [INT] NULL,
	    [UserId] [INT] NULL,
	    [CreatedByUserId] [INT] NULL,
	    [CreatedOnDate] [DATETIME] NULL,
	    [LastModifiedByUserId] [INT] NULL,
	    [LastModifiedOnDate] [DATETIME] NULL,
        CONSTRAINT [PK_{objectQualifier}PersonaBarMenuPermission] PRIMARY KEY CLUSTERED ([MenuPermissionId] ASC),
        CONSTRAINT [FK_{objectQualifier}PersonaBarMenuPermission_Permission] FOREIGN KEY([PermissionId]) REFERENCES {databaseOwner}[{objectQualifier}Permission] ([PermissionID]) ON DELETE CASCADE,
        CONSTRAINT [FK_{objectQualifier}PersonaBarMenuPermission_MenuId] FOREIGN KEY([MenuId]) REFERENCES {databaseOwner}[{objectQualifier}PersonaBarMenu] ([MenuId]) ON DELETE CASCADE,
        CONSTRAINT [FK_{objectQualifier}PersonaBarMenuPermission_Portals] FOREIGN KEY([PortalId])REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalId]) ON DELETE CASCADE,
        CONSTRAINT [FK_{objectQualifier}PersonaBarMenuPermission_Roles] FOREIGN KEY([RoleId])REFERENCES {databaseOwner}[{objectQualifier}Roles] ([RoleID]),
        CONSTRAINT [FK_{objectQualifier}PersonaBarMenuPermission_Users] FOREIGN KEY([UserId])REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID]) ON DELETE CASCADE,
        CONSTRAINT [IX_{objectQualifier}PersonaBarMenuPermission] UNIQUE NONCLUSTERED ([PortalId] ASC, [MenuId] ASC, [permissionId] ASC, [UserId] ASC, [RoleId] ASC)
    )
END
GO

IF EXISTS (SELECT * FROM Sys.Views WHERE (name = N'{objectQualifier}vw_PersonaBarMenuPermissions'))
    DROP VIEW {databaseOwner}[{objectQualifier}vw_PersonaBarMenuPermissions]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_PersonaBarMenuPermissions]
AS
SELECT  MP.MenuPermissionId,
        MP.MenuId,
        MP.PortalId,
        P.PermissionId,
        MP.RoleID,
        R.RoleName,
        MP.AllowAccess,
        MP.UserId,
        U.Username,
        U.DisplayName,
        P.PermissionCode,
        P.ModuleDefId,
        P.PermissionKey,
        P.PermissionName,
        MP.CreatedByUserId,
        MP.CreatedOnDate,
        MP.LastModifiedByUserId,
        MP.LastModifiedOnDate
FROM {databaseOwner}[{objectQualifier}PersonaBarMenuPermission] AS MP
    INNER JOIN {databaseOwner}[{objectQualifier}Permission]       AS P  ON MP.PermissionID = P.PermissionID
    LEFT  JOIN {databaseOwner}[{objectQualifier}Roles]            AS R  ON MP.RoleID       = R.RoleID
    LEFT  JOIN {databaseOwner}[{objectQualifier}Users]            AS U  ON MP.UserID       = U.UserID
GO

IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}SavePersonaBarMenuPermission') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}{objectQualifier}SavePersonaBarMenuPermission
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SavePersonaBarMenuPermission]
    @MenuPermissionId           INT,
    @PortalId                   INT,
    @MenuId                     INT,
    @PermissionId               INT,
    @RoleId                     INT,
    @UserId                     INT,
    @AllowAccess                BIT,
    @CurrentUserId            INT
AS
BEGIN
    IF EXISTS(SELECT MenuPermissionId FROM {databaseOwner}[{objectQualifier}PersonaBarMenuPermission] WHERE MenuPermissionId = @MenuPermissionId)
    BEGIN
        UPDATE {databaseOwner}[{objectQualifier}PersonaBarMenuPermission]
            SET PortalId = @PortalId,
                MenuId = @MenuId,
                PermissionId = @PermissionId,
                RoleId = @RoleId,
                UserId = @UserId,
                AllowAccess = @AllowAccess,
                LastModifiedByUserId = CASE WHEN @CurrentUserId = -1 THEN NULL ELSE @CurrentUserId END,
                LastModifiedOnDate = GETDATE()
            WHERE MenuPermissionId = @MenuPermissionId

            SELECT @MenuPermissionId
    END
    ELSE
    BEGIN
        INSERT INTO {databaseOwner}[{objectQualifier}PersonaBarMenuPermission] (
            [PortalId],
            [MenuId],
            [PermissionId],
            [RoleId],
            [AllowAccess],
            [UserId],
            [CreatedByUserId],
            [CreatedOnDate],
            [LastModifiedByUserId],
            [LastModifiedOnDate]
        ) VALUES (
            @PortalId,
            @MenuId,
            @PermissionId,
            @RoleId,
            @AllowAccess,
            CASE WHEN @UserId = -1 THEN Null ELSE @UserId END,
            CASE WHEN @CurrentUserId = -1 THEN NULL ELSE @CurrentUserId END,
            GETDATE(),
            CASE WHEN @CurrentUserId = -1 THEN NULL ELSE @CurrentUserId END,
            GETDATE()
        )

        SELECT SCOPE_IDENTITY()
    END
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}DeletePersonaBarMenuPermissionById') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}{objectQualifier}DeletePersonaBarMenuPermissionById
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeletePersonaBarMenuPermissionById]
	@MenuPermissionId INT
AS
DELETE FROM {databaseOwner}[{objectQualifier}PersonaBarMenuPermission]
WHERE
	[MenuPermissionId] = @MenuPermissionId
GO

IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}DeletePersonaBarMenuPermissionsByMenuId') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}{objectQualifier}DeletePersonaBarMenuPermissionsByMenuId
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeletePersonaBarMenuPermissionsByMenuId]
    @PortalId INT,
	@MenuId INT
AS
DELETE FROM {databaseOwner}[{objectQualifier}PersonaBarMenuPermission]
WHERE
	[MenuId] = @MenuId AND (PortalId = @PortalId OR @PortalId IS NULL AND PortalId IS NULL)
GO

IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}GetPersonaBarMenuPermissionsByPortal') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}{objectQualifier}GetPersonaBarMenuPermissionsByPortal
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPersonaBarMenuPermissionsByPortal]
	@PortalID INT
AS
	SELECT * FROM {databaseOwner}[{objectQualifier}vw_PersonaBarMenuPermissions]
        WHERE PortalId = @PortalId OR PortalId IS NULL
GO

IF NOT EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}ModuleControls] WHERE [ControlKey] = N'CONTROLPANEL:PERSONABAR')
    INSERT INTO {databaseOwner}[{objectQualifier}ModuleControls] ([ModuleDefID], [ControlKey], [ControlTitle], [ControlSrc], [IconFile], [ControlType], [ViewOrder], [HelpUrl], [SupportsPartialRendering], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate], [SupportsPopUps]) VALUES (NULL, N'CONTROLPANEL:PERSONABAR', NULL, N'admin/Dnn.PersonaBar/UserControls/PersonaBarContainer.ascx', NULL, -3, NULL, NULL, 0, NULL, NULL, -1, NULL, 1)
GO

EXEC {databaseOwner}{objectQualifier}AddListEntry @ListName = N'Installer',
    @Value = N'PersonaBarMenu',
    @Text = N'Dnn.PersonaBar.UI.Components.Installers.PersonaBarMenuInstaller, Dnn.PersonaBar.UI',
    @ParentID = 0,
    @Level = 0,
    @EnableSortOrder = 0,
    @DefinitionID = 0,
    @Description = N'',
    @PortalID = -1,
    @SystemList = 0,
    @CreatedByUserId = NULL
GO

IF NOT EXISTS(SELECT MenuId FROM {databaseOwner}[{objectQualifier}PersonaBarMenu])
BEGIN
    INSERT INTO {databaseOwner}[{objectQualifier}PersonaBarMenu] (
            [Identifier],
            [ModuleName],
            [Controller],
            [ResourceKey],
            [Path],
            [MobileSupport],
            [ParentId],
            [Order],
            [AllowHost],
            [Enabled],
            [CreatedByUserId],
            [CreatedOnDate],
            [LastModifiedByUserId],
            [LastModifiedOnDate]
        )
        SELECT Item, Item, '', 'nav_' + Item, '', 1, NULL, ROW_NUMBER() OVER (ORDER BY (SELECT 1)) * 5, 1, 1, -1, GETDATE(), -1, GETDATE() 
            FROM {databaseOwner}{objectQualifier}SplitStrings_CTE('Content,Manage,Settings,Logout,Edit,Assets', ',')

    UPDATE {databaseOwner}[{objectQualifier}PersonaBarMenu]
        SET Controller = 'Dnn.PersonaBar.UI.MenuControllers.PlatformMenuController, Dnn.PersonaBar.UI'
        WHERE Identifier = 'Logout'

    UPDATE {databaseOwner}[{objectQualifier}PersonaBarMenu]
        SET [Order] = 1000
        WHERE Identifier = 'Edit'
    
    DECLARE @ParentId INT
    SELECT @ParentId = MenuId FROM {databaseOwner}[{objectQualifier}PersonaBarMenu] WHERE Identifier = 'Content'

    UPDATE {databaseOwner}[{objectQualifier}PersonaBarMenu]
        SET [Order] = 10,
        ParentId = @ParentId,
        Controller = 'Dnn.PersonaBar.UI.MenuControllers.LinkMenuController, Dnn.PersonaBar.UI',
        Path = 'LinkMenu?path=//Admin//FileManagement&sku=DNN'
        WHERE Identifier = 'Assets'

    INSERT INTO {databaseOwner}[{objectQualifier}PersonaBarMenuDefaultRoles]
        SELECT MenuId, 'Administrators' 
            FROM {databaseOwner}[{objectQualifier}PersonaBarMenu] 
            WHERE Identifier IN ('Content','Manage','Settings','Tools','Logout','Edit')
END
GO

IF NOT EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}Permission] WHERE PermissionCode = N'PERSONABAR_MENU' AND PermissionKey = 'VIEW')
BEGIN
EXEC {databaseOwner}{objectQualifier}AddPermission @ModuleDefID = -1,
    @PermissionCode = 'PERSONABAR_MENU',
    @PermissionKey = 'VIEW',
    @PermissionName = 'View Menu',
    @CreatedByUserID = -1
END
GO

IF NOT EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}Permission] WHERE PermissionCode = N'PERSONABAR_MENU' AND PermissionKey = 'EDIT')
BEGIN
EXEC {databaseOwner}{objectQualifier}AddPermission @ModuleDefID = -1,
    @PermissionCode = 'PERSONABAR_MENU',
    @PermissionKey = 'EDIT',
    @PermissionName = 'Edit Menu',
    @CreatedByUserID = -1
END
GO

IF NOT EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}Permission] WHERE PermissionCode = N'PERSONABAR_MENU' AND PermissionKey = 'ADMIN')
BEGIN
EXEC {databaseOwner}{objectQualifier}AddPermission @ModuleDefID = -1,
    @PermissionCode = 'PERSONABAR_MENU',
    @PermissionKey = 'ADMIN',
    @PermissionName = 'Admin Menu',
    @CreatedByUserID = -1
END
GO

IF NOT EXISTS(SELECT PackageType FROM {databaseOwner}[{objectQualifier}PackageTypes] WHERE [PackageType] = N'PersonaBar')
BEGIN
    INSERT INTO {databaseOwner}[{objectQualifier}PackageTypes] ([PackageType], [Description], [SecurityAccessLevel], [EditorControlSrc], [SupportsSideBySideInstallation]) VALUES (N'PersonaBar', N'PersonaBar', 3, NULL, 0)
END
GO

EXEC {databaseOwner}[{objectQualifier}UpdateHostSetting] @SettingName = N'AllowControlPanelToDetermineVisibility',
    @SettingValue = N'True',
    @SettingIsSecure = 0,
    @UserID = -1
GO

/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/
import React, {Component, PropTypes} from "react";
import GridCell from "dnn-grid-cell";
import { EditIcon, TrashIcon } from "dnn-svg-icons";
import styles from "./style.less";
import Localization from "../../../localization";
import EditUrl from "./EditUrl";

class UrlRow extends Component {
    onCancel() {
        
    }
    
    render() {
        const {url, siteAliases, primaryAliasId, editedUrl, saving, onChange, pageHasParent, onOpenEditForm, 
            onSave, onCancel, onDelete} = this.props;
        let generatedBy = Localization.get("Pages_Seo_GeneratedByAutomatic");
        
        if (!url.autoGenerated) {
            generatedBy = "generatedBy";
        }
        const opened = editedUrl && editedUrl.id === url.id;
        
        return (
            /* eslint-disable react/no-danger */
            <div className={styles.urlRow} >
                <GridCell columnSize={50} >
                    {url.path}
                </GridCell>
                <GridCell  columnSize={20} >
                    {url.statusCode.Value}
                </GridCell>
                <GridCell  columnSize={20} >
                    {generatedBy}
                </GridCell>
                {!url.autoGenerated &&
                    <GridCell  columnSize={10}>
                        <div className="extension-action" 
                            onClick={onDelete} dangerouslySetInnerHTML={{ __html: TrashIcon }}></div>
                        <div className="extension-action" 
                            onClick={onOpenEditForm.bind(this, url)} dangerouslySetInnerHTML={{ __html: EditIcon }}></div>
                    </GridCell>
                }
                {opened &&
                <EditUrl url={editedUrl} 
                    saving={saving}
                    pageHasParent={pageHasParent}
                    accordion={true} isOpened={opened} keepCollapsedContent={true}
                    onChange={onChange}
                    onSave={onSave} 
                    onCancel={onCancel} 
                    siteAliases={siteAliases}
                    primaryAliasId={primaryAliasId}
                    className="newUrlContainer" />}
            </div>
            /* eslint-enable react/no-danger */
        );
    }
}

UrlRow.propTypes = {
    url: PropTypes.object.isRequired,
    editedUrl: PropTypes.object,
    pageHasParent: PropTypes.bool,
    siteAliases: PropTypes.arrayOf(PropTypes.object).isRequired,
    primaryAliasId: PropTypes.number,
    saving: PropTypes.bool,
    onOpenEditForm: PropTypes.func.isRequired,
    onChange: PropTypes.func.isRequired,
    onSave: PropTypes.func.isRequired,
    onCancel: PropTypes.func.isRequired,
    onDelete: PropTypes.func.isRequired
};


export default UrlRow;